# -*- coding: utf-8 -*-
"""Análisis de datos de Covid-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BDj1oDqrhgBeCZJ72PL9Wr6vN4vV1yv6

1. Primero vamos a importar las librerias necesarias
"""

import numpy as np
import pandas as pd

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import validation_curve
import matplotlib.pyplot as plt
import seaborn as sns

"""2. Ahora vamos a conectar drive con nuestro cuaderno, para poder importar nuestra base de datos."""

from google.colab import drive
drive.mount('/content/drive')

"""3. Cargamos nuestra base de datos."""

base_de_datos_covid_1= pd.read_csv('/content/drive/MyDrive/Tesis/Base de Datos/casos-asociados-a-covid-19-support.csv')

"""4. Ahora vamos a ver algunos aspectos, para entender nuestros datos.

4. 1.Imprimir la base de datos.
"""

base_de_datos_covid_1.head()

"""4. 2.Imprimir la cantidad de datos que tiene nuestra base de datos."""

print('Cantidad de datos de la base de datos:\n', base_de_datos_covid_1.shape)

"""4. 3.Imprimir los tipos de datos de nuestra base de datos."""

print('Tipos de datos de la base:\n', base_de_datos_covid_1.info())

"""4. 4.Imprimir el número de datos faltantes por columna."""

print('Datos faltantes en la base de datos:\n', pd.isnull(base_de_datos_covid_1).sum())

"""4. 5.Imprimir las estadísticas de todas las columnas utilizando el parámetro include."""

base_de_datos_covid_1.describe(include = "all")

"""5. Vamos a ir cambiando los tipos de datos según sea conveniente.

5. 1.Columna de "origen".
"""

# Ahora vamos a cambiar los datos de origen por valores numéricos
base_de_datos_covid_1['origen'].replace(['USMER', 'FUERA DE USMER'],[0,1],inplace=True)

"""5. 2.Columna de "sector"."""

# Ahora vamos a cambiar los datos de origen por valores numéricos
base_de_datos_covid_1['sector'].replace(['SSA','PRIVADA','IMSS','ISSSTE','SEDEMA','SEMAR','PEMEX','ESTATAL',
                                         'CRUZ ROJA','IMSS-BIENESTAR','UNIVERSITARIO','DIF'],[0,1,2,3,4,5,6,7,8,9,10,11],
                                        inplace=True)

"""5. 3.Columna de "sexo"."""

# Voy a cambias los datos de sexo por valores numéricos
base_de_datos_covid_1['sexo'].replace(['MUJER','HOMBRE'],[0,1],inplace=True)

"""5. 4.Columna de "tipo_paciente"."""

# Voy a cambias los datos de tipo_paciente por valores numéricos
base_de_datos_covid_1['tipo_paciente'].replace(['HOSPITALIZADO','AMBULATORIO'],[0,1],inplace=True)

"""5. 5.Columna de "intubado"."""

# Voy a cambias los datos de intubado por valores numéricos
base_de_datos_covid_1['intubado'].replace(['SI','NO','NO APLICA','NO ESPECIFICADO'],[0,1,2,3],inplace=True)

"""5. 6.Columna de "neumonia"."""

# Voy a cambias los datos de neumonia por valores numéricos
base_de_datos_covid_1['neumonia'].replace(['SI','NO','NO ESPECIFICADO'],[0,1,2],inplace=True)

"""5. 7.Columna de "embarazo"."""

# Voy a cambias los datos de embarazo por valores numéricos
base_de_datos_covid_1['embarazo'].replace(['SI','NO','NO APLICA','SE IGNORA'],[0,1,2,3],inplace=True)

"""5. 8.Columna de "diabetes"."""

# Voy a cambias los datos de diabetes por valores numéricos
base_de_datos_covid_1['diabetes'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 9.Columna de "epoc"."""

# Voy a cambias los datos de epoc por valores numéricos
base_de_datos_covid_1['epoc'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 10.Columna de "asma"."""

# Voy a cambias los datos de asma por valores numéricos
base_de_datos_covid_1['asma'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 11.Columna de "inmusupr"."""

# Voy a cambias los datos de inmusupr por valores numéricos
base_de_datos_covid_1['inmusupr'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 12.Columna de "hipertension"."""

# Voy a cambias los datos de hipertension por valores numéricos
base_de_datos_covid_1['hipertension'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 13.Columna de "otra_com"."""

# Voy a cambias los datos de otra_com por valores numéricos
base_de_datos_covid_1['otra_com'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 14.Columna de "cardiovascular"."""

# Voy a cambias los datos de cardiovascular por valores numéricos
base_de_datos_covid_1['cardiovascular'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 15.Columan de "obesidad"."""

# Voy a cambias los datos de obesidad por valores numéricos
base_de_datos_covid_1['obesidad'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 16.Columna de "renal_cronica"."""

# Voy a cambias los datos de renal_cronica por valores numéricos
base_de_datos_covid_1['renal_cronica'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 17.Columna de "tabaquismo"."""

# Voy a cambias los datos de tabaquismo por valores numéricos
base_de_datos_covid_1['tabaquismo'].replace(['SI','NO','SE IGNORA'],[0,1,2],inplace=True)

"""5. 18.Columna de "otro_caso"."""

# Voy a cambias los datos de otro_caso por valores numéricos
base_de_datos_covid_1['otro_caso'].replace(['SI','NO','NO ESPECIFICADO'],[0,1,2],inplace=True)

"""5. 19.Columna de "uci"."""

# Voy a cambias los datos de uci  por valores numéricos
base_de_datos_covid_1['uci'].replace(['SI','NO','NO APLICA','NO ESPECIFICADO'],[0,1,2,3],inplace=True)

"""6. Ahora vamos a eliminar las columnas que no necesitamos."""

base_de_datos_covid = base_de_datos_covid_1.drop(['id','id_registro','fecha_actualizacion','entidad_um','entidad_nac',
                                                  'entidad_res','municipio_res','fecha_ingreso','fecha_sintomas',
                                                  'fecha_def','nacionalidad','habla_lengua_indi','negativo','migrante',
                                                  'pais_nacionalidad','pais_origen','rango_edad','num_fallecidos',
                                                  'num_hospitalizados','indigena','toma_muestra','positivo','pendiente'], axis=1)

"""7. Luego vamos a eliminar los datos que no son de ayuda para nuestro modelo.

7. 1.Pues para empezar dado que nuestra clase es intubado-No intubado, notemos que no nos interesan los pacientes ambulatorios, pues dicho tipo de paciente no son hospitalizados y por consiguiente no son intubados, por lo cual solo vamos a tomar en cuenta los pacientes clasificados como "HOSPITALIZADO".
"""

# Los pacientes hospitalizados son todos aquellos que son 0 entonces solo considerearemos los datos que son iguales a 0.
hospitalizado = base_de_datos_covid['tipo_paciente'] == 0

#Filtramos los pacientes Hospitalizados en la base de datos
base_de_datos_de_covid = base_de_datos_covid[hospitalizado]

base_de_datos_de_covid = base_de_datos_de_covid.drop(['tipo_paciente'], axis=1)

"""7. 2.De igual forma notemos que en la columna intubado, tenemos las clases 'SI' = 0,'NO' = 1,'NO APLICA' = 2 y 'NO ESPECIFICADO'=3, pero a nosotros únicamente nos interesan las clases 'SI' = 0 y 'NO' = 1, por lo cual vamos a eliminar las clases que no nos interesan."""

# Los pacientes hospitalizados son todos aquellos que son 0 entonces solo considerearemos los datos que son iguales a 0.
intubados = base_de_datos_covid['intubado'] <= 1

#Filtramos los pacientes Hospitalizados en la base de datos
base_de_datos_de_covid = base_de_datos_covid[intubados]

"""8. Ahora vamos a ver como quedo la base de datos despues de todo el preprocesamiento."""

base_de_datos_de_covid.head()

"""9. Para este modelo usaremos validación k-fold,por lo cual definiremos nuestras funciones para nuestro conjunto de entrenamiento/validación."""

y = base_de_datos_de_covid['intubado'].values
X = base_de_datos_de_covid.drop(['intubado'], axis=1)

"""10. Vamos a crear instancias de los modelo de regresión logística, bosques aleatorios y k-vecinos más cercanos."""

logreg = LogisticRegression(random_state=1)

clf = RandomForestClassifier(n_estimators=100, max_depth=5)

knn = KNeighborsClassifier(n_neighbors=10)

"""11. Ahora procederemos a evaluar el modelo usando validación cruzada, usando la función $model\_ 
selection.cross\_ val\_ score$.
"""

# Validación cruzada con regresión logistica
scores_reglog = cross_val_score(
            estimator=logreg,
            X=X,
            y=y,
            cv=10)

print('Precisión de regresión logistica = {:.3f} +/- {:.3f}'.format(scores_reglog.mean(), scores_reglog.std()))

# Validación cruzada con bosques aleatorios
np.random.seed(1)
scores_bos_a = cross_val_score(
            estimator=clf,
            X=X,
            y=y,
            cv=10)

print('Precisión de bosques aleatorios = {:.3f} +/- {:.3f}'.format(scores_bos_a.mean(), scores_bos_a.std()))

# Validación cruzada con K vecinos más cercanos
scores_Knn = cross_val_score(
            estimator=knn,
            X=X,
            y=y,
            cv=10)

print('Precisión de K-vecinos más cercanos = {:.3f} +/- {:.3f}'.format(scores_Knn.mean(), scores_Knn.std()))

"""11. 1.Revisemos las presiciones individuales."""

print('Precisión individual(Regrsión logistica):\n',scores_reglog)
print('Precisión individual(Bosques aleatorios):\n',scores_bos_a)
print('Precisión individual(K vecinos cercanos):\n',scores_Knn)

"""12. Ahora vamos a hacer curvas de validación."""

def plot_validation_curve(train_scores, test_scores,param_range, xlabel='', log=False):
    '''
    This code is from scikit-learn docs:
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_learning_curve.html
    
    Also here:
    https://github.com/rasbt/python-machine-learning-book-2nd-edition/blob/master/code/ch06/ch06.ipynb
    '''
    train_mean = np.mean(train_scores, axis=1)
    train_std = np.std(train_scores, axis=1)
    test_mean = np.mean(test_scores, axis=1)
    test_std = np.std(test_scores, axis=1)

    fig = plt.figure()
    
    plt.plot(param_range, train_mean, 
             color=sns.color_palette('Set1')[1], marker='o', 
             markersize=5, label='Precisión de entrenamiento')

    plt.fill_between(param_range, train_mean + train_std,
                     train_mean - train_std, alpha=0.15,
                     color=sns.color_palette('Set1')[1])

    plt.plot(param_range, test_mean, 
             color=sns.color_palette('Set1')[0], linestyle='--', 
             marker='s', markersize=5, 
             label='Precisión de validación')

    plt.fill_between(param_range, 
                     test_mean + test_std,
                     test_mean - test_std, 
                     alpha=0.15, color=sns.color_palette('Set1')[0])

    if log:
        plt.xscale('log')
    plt.legend(loc='lower right')
    if xlabel:
        plt.xlabel(xlabel)
    plt.ylabel('Precisión')
    plt.ylim()
    return fig

clf = RandomForestClassifier(n_estimators=10)
max_depths = np.arange(3, 16, 3)

train_scores_bos_a, test_scores_bos_a = validation_curve(
            estimator=clf,
            X=X,
            y=y,
            param_name='max_depth',
            param_range=max_depths,
            cv=10);

#Para bosques aleatorios
plot_validation_curve(train_scores_bos_a, test_scores_bos_a,
                      max_depths, xlabel='max_depth')
plt.ylim()